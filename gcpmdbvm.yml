---
# Playbook to configure a MariaDB vm using in GCP.
# =============================================================================
# Play 0: Create a small VM and install MariaDB
# =============================================================================
- name: Create a small VM and install MariaDB
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Create a small VM
      community.general.gcp_compute_instance:
        name: mock-vm
        machine_type: f1-micro
        zone: us-central1-a
        project: mock-project
        auth_kind: serviceaccount
        service_account_file: /path/to/your/service-account.json
        disks:
          - auto_delete: true
            boot: true
            initialize_params:
              source_image: projects/ubuntu-os-cloud/global/images/family/ubuntu-2204-lts   
        network_interfaces:
          - network: default
            access_configs:
              - name: External NAT
                type: ONE_TO_ONE_NAT
      register: vm_instance

    - name: Wait for SSH to become available
      wait_for:
        host: "{{ vm_instance.instance.networkInterfaces[0].accessConfigs[0].natIP }}"
        port: 22
        timeout: 300

    # =============================================================================
    # Play 1: Ensure Required Tools are Installed
    # =============================================================================
    - name: Ensure Required Tools are Installed
      hosts: localhost
      gather_facts: false
      tasks:
        - name: Ensure Python is installed
          ansible.builtin.shell: |
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip
          args:
            ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
          delegate_to: "{{ vm_instance.instance.networkInterfaces[0].accessConfigs[0].natIP }}"

        - name: Ensure MySQL library for Ansible is installed
          ansible.builtin.shell: |
            pip3 install mysql-connector-python
          args:
            ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
          delegate_to: "{{ vm_instance.instance.networkInterfaces[0].accessConfigs[0].natIP }}"
          
        - name: Install MariaDB on the VM
          ansible.builtin.shell: |
            sudo apt-get update
            sudo apt-get install -y mariadb-server
          args:
            ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
          delegate_to: "{{ vm_instance.instance.networkInterfaces[0].accessConfigs[0].natIP }}"

        - name: Install Tailscale on the VM
          ansible.builtin.shell: |
            curl -fsSL https://tailscale.com/install.sh | sh
            sudo tailscale up
          args:
            ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
            delegate_to: "{{ vm_instance.instance.networkInterfaces[0].accessConfigs[0].natIP }}"

        - name: Authenticate Tailscale using OAuth
          ansible.builtin.shell: |
              sudo tailscale up --authkey=$(curl -s -X POST https://api.tailscale.com/api/v2/oauth/token \
              -d client_id=your-client-id \
              -d client_secret=your-client-secret \
              -d grant_type=client_credentials | jq -r '.access_token')
          args:
              ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
          delegate_to: "{{ vm_instance.instance.networkInterfaces[0].accessConfigs[0].natIP }}"    - name: Configure Tailscale for Tailscale SSH
          ansible.builtin.shell: |
            sudo tailscale up --ssh
          args:
            ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
          delegate_to: "{{ vm_instance.instance.networkInterfaces[0].accessConfigs[0].natIP }}"

        - name: Disable local SSH
          ansible.builtin.shell: |
            sudo systemctl stop ssh
            sudo systemctl disable ssh
          args:
            ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
          delegate_to: "{{ vm_instance.instance.networkInterfaces[0].accessConfigs[0].natIP }}"