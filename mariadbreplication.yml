---
# mariadbreplication.yml
# Playbook to configure a MariaDB replica using a dump from the master.
# =============================================================================
# Play 0: Ensure Required Tools are Installed
# =============================================================================
- name: Ensure Required Tools are Installed
  hosts: all
  gather_facts: no
  become: yes # Use root privileges if needed

  tasks:
    - name: Check if Python 3 is installed
      raw: |
        dpkg -l | grep python3
      register: check_python3
      changed_when: false
      failed_when: check_python3.rc not in [0, 1]

    - name: Install Python 3 if not present
      raw: |
        apt-get update && apt-get install -y python3
      when: check_python3.rc == 1
      register: install_python3
      changed_when: install_python3.rc == 0

    - name: Check if python3-mysqldb is installed
      raw: |
        dpkg -l | grep python3-mysqldb
      register: check_python3_mysqldb
      changed_when: false
      failed_when: check_python3_mysqldb.rc not in [0, 1]

    - name: Install python3-mysqldb if not present
      raw: |
        apt-get install -y python3-mysqldb
      when: check_python3_mysqldb.rc == 1
      register: install_python3_mysqldb
      changed_when: install_python3_mysqldb.rc == 0

# =============================================================================
# Play 1: Prepare Master (Check GTID Settings)
# =============================================================================
- name: Prepare MariaDB Master for Replication
  hosts: mariadb_master
  gather_facts: no
  become: yes # Use root privileges if needed for mysql commands

  vars:
    # Default master server_id (adjust if different)
    master_server_id: 1

  tasks:
    - name: Ensure MariaDB process is running on master
      ansible.builtin.command: pgrep mysqld
      register: mysql_process_check
      changed_when: false
      failed_when: mysql_process_check.rc != 0

    - name: Check GTID settings on master
      ansible.builtin.command: >
        mysql -uroot -e "
        SHOW VARIABLES LIKE 'log_bin';
        SHOW VARIABLES LIKE 'binlog_format';
        SHOW VARIABLES LIKE 'server_id';
        SHOW VARIABLES LIKE 'gtid_domain_id';"
      register: gtid_check
      changed_when: false
      failed_when: gtid_check.rc != 0

    - name: Configure GTID-related settings dynamically
      ansible.builtin.command: >
        mysql -uroot  -e "
        SET GLOBAL log_bin = 'mysql-bin';
        SET GLOBAL binlog_format = 'ROW';
        SET GLOBAL server_id = {{ master_server_id }};
        SET GLOBAL gtid_domain_id = 1;"
      when: >
        gtid_check.stdout.find('log_bin\tON') == -1 or
        gtid_check.stdout.find('binlog_format\tROW') == -1 or
        gtid_check.stdout.find('server_id\t{{ master_server_id }}') == -1 or
        gtid_check.stdout.find('gtid_domain_id\t1') == -1

    - name: Persist GTID settings in my.cnf
      ansible.builtin.blockinfile:
        path: /etc/mysql/my.cnf # Adjust path if different
        block: |
          [mysqld]
          server_id={{ master_server_id }}
          log_bin=mysql-bin
          binlog_format=ROW
          gtid_domain_id=1
        marker: "# {mark} ANSIBLE MANAGED BLOCK - GTID SETTINGS"
        create: yes

# =============================================================================
# Play 2: Create Snapshot from Master and Copy to Replica
# =============================================================================
- name: Create Snapshot from Master and Copy to Replica
  hosts: mariadb_master
  gather_facts: no
  become: yes # Use root privileges if needed for mysql commands

  vars:
    # Path for the snapshot file on the master
    snapshot_file_path: /tmp/final_snapshot.sql.gz

  tasks:
    - name: Ensure MariaDB process is running on master
      ansible.builtin.command: pgrep mysqld
      register: mysql_process_check
      changed_when: false
      failed_when: mysql_process_check.rc != 0

    - name: Create replication user on master
      community.mysql.mysql_user:
        login_user: root
        login_password: "{{ db_root_password }}"
        name: "{{ db_repl_user }}"
        password: "{{ db_repl_password }}"
        host: '%' # Allow connection from any host (adjust if replica has fixed IP)
        priv: '*.*:REPLICATION SLAVE,RELOAD,PROCESS' # PROCESS needed for SHOW MASTER STATUS
        state: present
        update_password: on_create
      # no_log: true # Avoid logging passwords

    - name: Remove existing maxscale_user grants
      ansible.builtin.shell: >
        mysql -uroot -e "REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'maxscale_user'@'%';"
      register: revoke_grants
      changed_when: revoke_grants.rc == 0
      ignore_errors: true  # Ignore errors if the user does not exist

    - name: Create or update maxscale_user on all replicas
      community.mysql.mysql_user:
        login_user: root
        login_password: "{{ db_root_password }}"
        name: maxscale_user
        password: "maxscale_password"
        host: '%'
        priv: '*.*:REPLICATION CLIENT, SUPER, RELOAD, PROCESS, SHOW DATABASES, EVENT, REPLICATION SLAVE'
        state: present
        update_password: always

    - name: Create Laravel user on master
      community.mysql.mysql_user:
        login_user: root
        login_password: "{{ db_root_password }}"
        name: laravel
        password: laravel
        host: '%'
        priv: '*.*:ALL'
        state: present
        update_password: always
   
    - name: Get master's GTID state
      ansible.builtin.shell: >
        mysql -uroot -e "SHOW VARIABLES LIKE 'gtid_binlog_pos';" | awk '/gtid_binlog_pos/ {print $2}'
      register: master_gtid_state
      changed_when: false

    - name: Display master's GTID state
      ansible.builtin.debug:
        msg: "Master's GTID state: {{ master_gtid_state.stdout }}"

    - name: Create database snapshot on master
      ansible.builtin.shell: >
        mariadb-dump --all-databases --ignore-database=mysql --master-data=2 --single-transaction --events --routines \
        -uroot | gzip > /tmp/final_snapshot.sql.gz
      register: snapshot_result
      changed_when: snapshot_result.rc == 0
      #no_log: true # Avoid logging password

    - name: Fetch the snapshot file from master
      ansible.builtin.fetch:
        src: "{{ snapshot_file_path }}"
        dest: "/tmp/" # Destination on Ansible controller node
        flat: yes # Store directly in /tmp/ without hostname directory
      become: yes
     

    - name: Copy the snapshot file to all replicas
      ansible.builtin.copy:
        src: "/tmp/{{ snapshot_file_path | basename }}" # Source from Ansible controller node
        dest: "{{ snapshot_file_path }}" # Destination on replica node
        mode: '0644'
      delegate_to: "{{ item }}" # Run this task on each replica host
      with_items: "{{ groups['mariadb_replica'] }}" # Loop over all hosts in the mariadb_replica group

    - name: Remove dump file from master (optional cleanup)
      ansible.builtin.file:
        path: "{{ snapshot_file_path }}"
        state: absent
      delegate_to: "{{ hostvars[groups['mariadb_master'][0]]['ansible_host'] | default(groups['mariadb_master'][0]) }}" # Run this task on the master host
      become: yes   

# =============================================================================
# Play 2: Use GCP Disk for Data Transfer
# =============================================================================
- name: Create and use GCP disk for MariaDB data transfer
  hosts: mariadb_master
  gather_facts: no
  become: yes

  vars_files:
  - /etc/ansible/group_vars/gcp.yml

  vars:
    gcp_project: your-gcp-project
    gcp_zone: your-gcp-zone
    disk_name: mariadb-transfer-disk
    disk_size_gb: 60
    disk_type: pd-ssd
    device_name: mariadb-transfer-disk
    mount_point: /mnt/mariadb-transfer
    service_account_file: "{{ gcp_service_account_file }}"

  tasks:
    - name: Create GCP disk for transfer
      google.cloud.gcp_compute_disk:
        name: "{{ disk_name }}"
        size_gb: "{{ disk_size_gb }}"
        zone: "{{ replica_zone }}"
        project: "{{ gcp_project_name }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
        type: "{{ disk_type }}"
        state: present
      delegate_to: localhost

    - name: Attach disk to master
      google.cloud.gcp_compute_instance_disk:
        instance: "{{ inventory_hostname }}"
        zone: "{{ gcp_zone }}"
        project: "{{ gcp_project }}"
        disk: "{{ disk_name }}"
        state: present
      delegate_to: localhost

    - name: Wait for disk device to appear
      ansible.builtin.wait_for:
        path: /dev/disk/by-id/google-{{ disk_name }}
        timeout: 60

    - name: Create filesystem on new disk (if needed)
      ansible.builtin.shell: |
        mkfs.ext4 /dev/disk/by-id/google-{{ disk_name }}
      args:
        creates: /dev/disk/by-id/google-{{ disk_name }}

    - name: Create mount point
      ansible.builtin.file:
        path: "{{ mount_point }}"
        state: directory

    - name: Mount the disk
      ansible.builtin.mount:
        path: "{{ mount_point }}"
        src: "/dev/disk/by-id/google-{{ disk_name }}"
        fstype: ext4
        state: mounted

    - name: Stop MariaDB (optional, for consistency)
      ansible.builtin.service:
        name: mariadb
        state: stopped

    - name: Copy MariaDB data to transfer disk
      ansible.builtin.shell: |
        rsync -a --delete /var/lib/mysql/ {{ mount_point }}/mysql/
      args:
        warn: false

    - name: Start MariaDB
      ansible.builtin.service:
        name: mariadb
        state: started

    - name: Unmount transfer disk
      ansible.builtin.mount:
        path: "{{ mount_point }}"
        state: unmounted

    - name: Detach disk from master
      google.cloud.gcp_compute_instance_disk:
        instance: "{{ inventory_hostname }}"
        zone: "{{ gcp_zone }}"
        project: "{{ gcp_project }}"
        disk: "{{ disk_name }}"
        state: absent
      delegate_to: localhost

# =============================================================================
# Play 2b: Attach disk to replica and restore data
# =============================================================================
- name: Attach GCP disk to replica and restore data
  hosts: mariadb_replica
  gather_facts: no
  become: yes

  vars:
    gcp_project: your-gcp-project
    gcp_zone: your-gcp-zone
    disk_name: mariadb-transfer-disk
    mount_point: /mnt/mariadb-transfer

  tasks:
    - name: Attach disk to replica
      google.cloud.gcp_compute_instance_disk:
        instance: "{{ inventory_hostname }}"
        zone: "{{ gcp_zone }}"
        project: "{{ gcp_project }}"
        disk: "{{ disk_name }}"
        state: present
      delegate_to: localhost

    - name: Wait for disk device to appear
      ansible.builtin.wait_for:
        path: /dev/disk/by-id/google-{{ disk_name }}
        timeout: 60

    - name: Create mount point
      ansible.builtin.file:
        path: "{{ mount_point }}"
        state: directory

    - name: Mount the disk
      ansible.builtin.mount:
        path: "{{ mount_point }}"
        src: "/dev/disk/by-id/google-{{ disk_name }}"
        fstype: ext4
        state: mounted

    - name: Stop MariaDB
      ansible.builtin.service:
        name: mariadb
        state: stopped

    - name: Copy data from transfer disk to replica
      ansible.builtin.shell: |
        rsync -a --delete {{ mount_point }}/mysql/ /var/lib/mysql/
      args:
        warn: false

    - name: Start MariaDB
      ansible.builtin.service:
        name: mariadb
        state: started

    - name: Unmount transfer disk
      ansible.builtin.mount:
        path: "{{ mount_point }}"
        state: unmounted

    - name: Detach disk from replica
      google.cloud.gcp_compute_instance_disk:
        instance: "{{ inventory_hostname }}"
        zone: "{{ gcp_zone }}"
        project: "{{ gcp_project }}"
        disk: "{{ disk_name }}"
        state: absent
      delegate_to: localhost

    - name: Delete transfer disk (optional cleanup)
      google.cloud.gcp_compute_disk:
        name: "{{ disk_name }}"
        zone: "{{ gcp_zone }}"
        project: "{{ gcp_project }}"
        state: absent
      delegate_to: localhost

# =============================================================================
# Play 3: Configure Replica
# =============================================================================
- name: Configure MariaDB Replica
  hosts: mariadb_replica
  gather_facts: no
  become: yes # Use root privileges

  vars:
    # Ensure MariaDB service name matches your container setup
    mariadb_service_name: mariadb # or mysql
    gtid_domain_id: 1 # GTID domain ID matching the master
    # Ensure MariaDB data directory path matches your container setup
    mariadb_data_dir: /var/lib/mysql
    # Path for the dump file on the replica
    dump_file_path: /tmp/final_snapshot.sql.gz

  tasks: 

    - name: Check replication status
      ansible.builtin.command: >
        mysql -u root -Be "SHOW SLAVE STATUS\G"
      register: slave_status
      changed_when: false
      failed_when: false  # Do not fail if replication is not set
      retries: 2
      delay: 3

    - name: Skip remaining tasks if replication is running
      ansible.builtin.meta: end_host
      when: >
        'Slave_IO_Running: Yes' in slave_status.stdout and
        'Slave_SQL_Running: Yes' in slave_status.stdout

    - name: Remove existing maxscale_user grants
      ansible.builtin.shell: >
        mysql -uroot -e "REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'maxscale_user'@'%';"
      register: revoke_grants
      changed_when: revoke_grants.rc == 0
      ignore_errors: true  # Ignore errors if the user does not exist

    - name: Create or update maxscale_user on all replicas
      community.mysql.mysql_user:
        login_user: root
        login_password: "{{ db_root_password }}"
        name: maxscale_user
        password: "maxscale_password"
        host: '%'
        priv: '*.*:REPLICATION CLIENT, SUPER, RELOAD, PROCESS, SHOW DATABASES, EVENT, REPLICATION SLAVE'
        state: present
        update_password: always

    - name: Create Laravel user on replicas
      community.mysql.mysql_user:
        login_user: root
        login_password: "{{ db_root_password }}"
        name: laravel
        password: laravel
        host: '%'
        priv: '*.*:ALL'
        state: present
        update_password: always    

    - name: Drop all non-system databases on replica
      ansible.builtin.command: >
        mysql -uroot -e "
        SET GLOBAL FOREIGN_KEY_CHECKS = 0;
        SELECT CONCAT('DROP DATABASE `', schema_name, '`;')
        FROM information_schema.schemata
        WHERE schema_name NOT IN ('mysql', 'information_schema', 'performance_schema', 'sys');
        SET GLOBAL FOREIGN_KEY_CHECKS = 1;"
      register: drop_databases
      changed_when: drop_databases.rc == 0

    - name: Configure MariaDB replica settings (my.cnf)
      ansible.builtin.blockinfile:
        path: /etc/mysql/my.cnf # Adjust path if different
        block: |
          [mysqld]
          server_id={{ replica_server_id }}
          log_bin=mysql-bin
          relay_log=mysql-relay-bin
          binlog_format=ROW
          log_slave_updates=ON
          read_only=ON
          gtid_domain_id={{ gtid_domain_id }}
          gtid_strict_mode=ON
          report_host={{ ansible_host }}
          report_port=3306
          innodb_buffer_pool_size=256M
          innodb_doublewrite=0
          innodb_flush_log_at_trx_commit=0
        marker: "# {mark} ANSIBLE MANAGED BLOCK - REPLICA SETTINGS"
        create: yes # Create file if it doesn't exist (adjust if needed)

    - name: Restart MariaDB container
      ansible.builtin.shell: >
        docker restart "{{ hostvars[inventory_hostname]['replica_container_name'] }}"    
      register: restart_result
      changed_when: restart_result.rc == 0
      delegate_to: localhost

    - name: Display restart result
      ansible.builtin.debug:
        var: restart_result.stdout
      delegate_to: localhost

    - name: Debug MariaDB configuration file (new variables only)
      ansible.builtin.shell: >
        grep -E "server_id|log_bin|relay_log|binlog_format|log_slave_updates|read_only|gtid_domain_id|gtid_strict_mode|report_host|report_port|innodb_buffer_pool_size|innodb_doublewrite|innodb_flush_log_at_trx_commit" /etc/mysql/my.cnf
      register: mycnf_new_variables
      changed_when: false

    - name: Display new MariaDB configuration variables
      ansible.builtin.debug:
        var: mycnf_new_variables.stdout

    - name: Restore database dump on replica
      ansible.builtin.shell: >
        gunzip < {{ dump_file_path }} | mysql -uroot
      register: restore_result
      changed_when: restore_result.rc == 0
     # no_log: true # Avoid logging password

    - name: Remove dump file from all replicas (optional cleanup)
      ansible.builtin.file:
        path: "{{ dump_file_path }}"
        state: absent


    - name: Wait for MariaDB port (3306) on replica
      ansible.builtin.wait_for:
        port: 3306
        host: "{{ ansible_host | default(inventory_hostname) }}"
        timeout: 60
        delay: 5

    - name: Stop replication on all replicas
      ansible.builtin.shell: >
        mysql -uroot -e "STOP SLAVE;"
      register: stop_slave
      changed_when: stop_slave.rc == 0

    - name: Reset replication state on all replicas
      ansible.builtin.shell: >
        mysql -uroot -e "RESET SLAVE ALL;"
      register: reset_slave
      changed_when: reset_slave.rc == 0

    - name: Reset binary logs on all replicas (if binary logs exist)
      ansible.builtin.shell: >
        mysql -uroot -e "RESET MASTER;"
      register: reset_master
      changed_when: reset_master.rc == 0    

    - name: Set replica's GTID state
      ansible.builtin.shell: >
        mysql -uroot -e "SET GLOBAL gtid_slave_pos='{{ hostvars[groups['mariadb_master'][0]].master_gtid_state.stdout }}';"    
      register: set_gtid_state
      changed_when: set_gtid_state.rc == 0

    - name: Configure replication connection on replica
      ansible.builtin.shell: >
        mysql -uroot -e "
        CHANGE MASTER TO
          MASTER_HOST='{{ hostvars[groups['mariadb_master'][0]]['ansible_host'] | default(groups['mariadb_master'][0]) }}',
          MASTER_USER='{{ db_repl_user }}',
          MASTER_PASSWORD='{{ db_repl_password }}',
          MASTER_USE_GTID=slave_pos;"
      register: configure_replication
      changed_when: configure_replication.rc == 0

    - name: Start replication threads on replica
      ansible.builtin.shell: >
        mysql -uroot -e "START SLAVE;"
      register: start_replication
      changed_when: start_replication.rc == 0

    - name: Check replication status
      ansible.builtin.command: >
        mysql -u root -Be "SHOW SLAVE STATUS\G"
      register: slave_status
      changed_when: false
      failed_when: >
        'Slave_IO_Running: Yes' not in slave_status.stdout or
        'Slave_SQL_Running: Yes' not in slave_status.stdout
      retries: 5
      delay: 10

    - name: Display final replication status
      ansible.builtin.debug:
        msg:
          - "Replication IO Thread Running: {{ slave_status.stdout | regex_search('Slave_IO_Running: (\\w+)', '\\1') | first }}"
          - "Replication SQL Thread Running: {{ slave_status.stdout | regex_search('Slave_SQL_Running: (\\w+)', '\\1') | first }}"
          - "Seconds Behind Master: {{ slave_status.stdout | regex_search('Seconds_Behind_Master: (\\d+)', '\\1') | first }}"
          - "Last IO Error: {{ slave_status.stdout | regex_search('Last_IO_Error: (.*)', '\\1') | first }}"
          - "Last SQL Error: {{ slave_status.stdout | regex_search('Last_SQL_Error: (.*)', '\\1') | first }}"

    - name: Check Docker container status
      ansible.builtin.docker_container_info:
        name: "{{ inventory_hostname }}"
      register: container_status
      delegate_to: localhost

    - name: Display Docker container status
      ansible.builtin.debug:
        var: container_status
      delegate_to: localhost
