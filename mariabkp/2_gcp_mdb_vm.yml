---
# Playbook to configure a MariaDB VM for replication using GCP.
# =============================================================================
# Play 0: Ensure the VM exists
# Set the replica name on the gcp.yml file use the replica_name variable new name 
# for new replica existing name for idempotency and remediation
# =============================================================================
- name: Ensure the VM exists
  hosts: localhost
  gather_facts: false
 
  vars_files:
    - /etc/ansible/group_vars/gcp.yml
  vars:
    mariadb_container_name: "mdb-{{ replica_name }}"
  tags:
    - play0    
  tasks:
    - name: Ensure the VM exists (create if needed)
      google.cloud.gcp_compute_instance:
        name: "{{ replica_name }}-{{ replica_zone }}"
        hostname: "{{ replica_name }}.mdb"
        machine_type: e2-standard-4
        zone: "{{ replica_zone }}"
        project: "{{ gcp_project_name }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
        disks:
          - auto_delete: true
            boot: true
            device_name: boot-disk
            initialize_params:
              source_image: projects/ubuntu-os-cloud/global/images/family/ubuntu-2204-lts
              disk_name: "{{ replica_name }}-boot"
              disk_type: pd-ssd
              disk_size_gb: 20
        network_interfaces:
          - network: { selfLink: "https://www.googleapis.com/compute/v1/projects/{{ gcp_project_name }}/global/networks/staging-vpc" }
            access_configs:
              - name: External NAT
                network_tier: STANDARD
                type: ONE_TO_ONE_NAT
        metadata:
          startup-script: |
            #!/bin/bash
            if [ ! -f /var/log/tailscale-installed ]; then
              curl -fsSL https://tailscale.com/install.sh | sh
              tailscale up --authkey={{ tailscale_auth_key }} --ssh --hostname={{ replica_name }}-mdb
              touch /var/log/tailscale-installed
            fi
        state: present        
      register: vm_instance
      
    - name: Add or update vm entry in inventory.ini using Tailscale hostname
      ansible.builtin.lineinfile:
        path: /etc/ansible/inventory.ini
        insertbefore: '^\[mariadb:children\]'
        regexp: "^{{ replica_name }}\\s"
        line: "{{ replica_name }} ansible_host={{ replica_name }}-mdb ansible_user=root replica_server_id={{ server_id }}" 
        state: present

    - name: Add new VM to in-memory inventory using Tailscale hostname
      add_host:
        name: "{{ replica_name }}"
        ansible_host: "{{ replica_name }}-mdb"
        ansible_user: root
        replica_server_id: "{{ server_id }}"


# =============================================================================
# Play 1: Ensure Required Tools are Installed
# =============================================================================
- name: Ensure Required Tools are Installed
  hosts: "{{ replica_name }}"
  gather_facts: false
  vars_files:
    - /etc/ansible/group_vars/gcp.yml
  vars:
    user : root # change to ansible user for prod 
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
  tags:
    - play1  
  tasks:
    - name: Gather installed package facts
      ansible.builtin.package_facts:
        manager: auto

    - name: Check if Python 3 is installed
      raw: |
        dpkg -l | grep python3
      register: check_python3
      changed_when: false
      failed_when: check_python3.rc not in [0, 1]

    - name: Install Python 3 if not present
      raw: |
        apt-get update && apt-get install -y python3
      when: check_python3.rc == 1

    - name: Install python3-mysqldb
      ansible.builtin.apt:
        name: python3-mysqldb
        state: present
  
    - name: Install AppArmor
      ansible.builtin.apt:
        name:
          - apparmor
          - apparmor-utils
        state: present
    
    - name: Ensure Docker is installed
      ansible.builtin.apt:
        name: docker.io
        state: present
        update_cache: yes

    - name: Ensure Docker Python SDK is installed
      ansible.builtin.apt:
        name: python3-docker
        state: present

        
#    - name: Reload AppArmor to apply changes
#      ansible.builtin.service:
#        name: apparmor
#        state: reloaded
# =============================================================================
# Play 2 Prepare replica disk from master snapshot
# =============================================================================
- name: Prepare replica disk from master snapshot
  hosts: localhost
  gather_facts: no
  vars_files:
    - /etc/ansible/group_vars/gcp.yml

  vars:
    transfer_disk_name: master-transfer-disk
    disk_prefix: mdbdisk
    disk_size_gb: 100
    disk_type: pd-ssd
    mount_point: /mnt/mdbdisk
  tags:
    - play2

  tasks:
    - name: Find latest snapshot of master-transfer-disk
      google.cloud.gcp_compute_snapshot_info:
        project: "{{ gcp_project_name }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
      register: gcp_snapshots

    - name: Debug List all candidate snapshots for {{ transfer_disk_name }}
      debug:
        msg: "{{ gcp_snapshots.resources | selectattr('sourceDisk', 'search', transfer_disk_name + '$') | map(attribute='name') | list }}"

    - name: Set latest snapshot name for master-transfer-disk
      set_fact:
        latest_snapshot: >-
          {{
            (
              gcp_snapshots.resources
              | selectattr('sourceDisk', 'search', transfer_disk_name + '$')
              | sort(attribute='creationTimestamp', reverse=true)
              | map(attribute='name')
              | list
            )[0] | default('')
          }}
      when: gcp_snapshots.resources | length > 0

    - name: Debug Show latest snapshot selected
      debug:
        msg: "Using snapshot {{ latest_snapshot }} for replica disk"

    - name: Fail if no snapshot was found
      ansible.builtin.fail:
        msg: "No valid snapshot found for {{ transfer_disk_name }}. Aborting to avoid creating a blank disk!"
      when: latest_snapshot is not defined or latest_snapshot == ""

    - name: Check if replica disk exists
      ansible.builtin.command: >
        /google-cloud-sdk/bin/gcloud compute disks describe {{ disk_prefix }}-{{ replica_name }}
        --zone={{ replica_zone }}
        --project={{ gcp_project_name }}
      environment:
        CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE: "{{ gcp_service_account_file }}"
      register: disk_exists
      ignore_errors: true

    - name: Create disk from latest snapshot in replica zone (gcloud CLI)
      ansible.builtin.command: >
        /google-cloud-sdk/bin/gcloud compute disks create {{ disk_prefix }}-{{ replica_name }}
        --project={{ gcp_project_name }}
        --type={{ disk_type }}
        --size={{ disk_size_gb }}GB
        --zone={{ replica_zone }}
        --source-snapshot=projects/{{ gcp_project_name }}/global/snapshots/{{ latest_snapshot }}
      environment:
        CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE: "{{ gcp_service_account_file }}"
      when: disk_exists.rc != 0
      register: create_disk_result

    - name: Attach disk to replica (using gcloud CLI)
      ansible.builtin.command: >
        /google-cloud-sdk/bin/gcloud compute instances attach-disk {{ replica_name }}-{{ replica_zone }}
        --disk={{ disk_prefix }}-{{ replica_name }}
        --device-name={{ disk_prefix }}-{{ replica_name }}
        --zone={{ replica_zone }}
        --project={{ gcp_project_name }}
        --quiet
      environment:
        CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE: "{{ gcp_service_account_file }}"
      register: attach_disk_result
      changed_when: "'attached' in attach_disk_result.stdout or attach_disk_result.rc == 0"
      failed_when: >
        attach_disk_result.rc != 0 and
        ('already attached' not in attach_disk_result.stderr and
         'is already attached' not in attach_disk_result.stderr and
         'is already being used by' not in attach_disk_result.stderr)

    - name: Check for disk device on replica (retry up to 3 times)
      ansible.builtin.shell: |
        if [ -e /dev/disk/by-id/google-{{ disk_prefix }}-{{ replica_name }} ]; then
          echo "FOUND"
        else
          echo "NOT FOUND"
        fi
      register: disk_check
      retries: 3
      delay: 5
      until: disk_check.stdout.find("FOUND") != -1
      delegate_to: "{{ replica_name }}"
      failed_when: disk_check.stdout.find("FOUND") == -1

    - name: Fail if disk device did not appear after retries
      ansible.builtin.fail:
        msg: "Disk device /dev/disk/by-id/google-{{ disk_prefix }}-{{ replica_name }} did not appear after 3 attempts. Aborting."
      when: disk_check.stdout.find("FOUND") == -1

    - name: Create mount point on replica
      ansible.builtin.file:
        path: "{{ mount_point }}"
        state: directory
      delegate_to: "{{ replica_name }}"

    - name: Mount the disk on replica
      ansible.builtin.mount:
        path: "{{ mount_point }}"
        src: "/dev/disk/by-id/google-{{ disk_prefix }}-{{ replica_name }}"
        fstype: ext4
        state: mounted
      delegate_to: "{{ replica_name }}"

# =============================================================================
# Play 3: Ensure Dockerized MariaDB Replica
# =============================================================================
- name: Ensure Dockerized MariaDB Replica
  hosts: "{{ replica_name }}"
  gather_facts: false
  vars_files:
    - /etc/ansible/group_vars/gcp.yml
    - /etc/ansible/group_vars/mariadb.yml
  vars:
    mariadb_version: "10.4.33"
    mariadb_image: "mariadb:10.4.33"
    mariadb_container_name: "mdb-{{ replica_name }}"
    mariadb_root_password: "{{ replica_root_pwd }}"
    # Tuning variables (override as needed)
    innodb_buffer_pool_size: "10G"
    innodb_log_file_size: "1G"
    innodb_log_files_in_group: 2
    innodb_flush_method: "O_DIRECT"
    innodb_io_capacity: 2000
    innodb_io_capacity_max: 4000
    max_connections: 250
    thread_cache_size: 32
    tmp_table_size: "128M"
    max_heap_table_size: "128M"
    query_cache_type: "OFF"
    query_cache_size: 0
  tags:
    - play3  
  tasks:

    - name: Pull MariaDB Docker image
      community.docker.docker_image:
        name: "{{ mariadb_image }}"
        source: pull

    - name: Run MariaDB Docker container
      community.docker.docker_container:
        name: "{{ mariadb_container_name }}"
        image: "{{ mariadb_image }}"
        state: started
        restart_policy: always
        volumes:
          - "{{ mariadb_data_dir }}:/var/lib/mysql"
        env:
          LD_PRELOAD: "/usr/lib/x86_64-linux-gnu/libjemalloc.so.2"
          MARIADB_ROOT_PASSWORD: "{{ mariadb_root_password }}"
        memory: "12g"
        cpus: 4
        published_ports:
          - "3306:3306"


