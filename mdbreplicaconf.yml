---
# mariadbreplication.yml
# Playbook to configure a MariaDB replica using a disk snapshot from the master.
# =============================================================================
# Play 0 Prepare replica disk from master snapshot
# =============================================================================
- name: Prepare replica disk from master snapshot
  hosts: localhost
  gather_facts: no
  vars_files:
    - /etc/ansible/group_vars/gcp.yml

  vars:
    transfer_disk_name: master-transfer-disk
    disk_prefix: transferdisk
    disk_size_gb: 60
    disk_type: pd-ssd
    mount_point: /mnt/mariadb-transfer
  tags:
    - play0

  tasks:
    - name: Find latest snapshot of master-transfer-disk
      google.cloud.gcp_compute_snapshot_info:
        project: "{{ gcp_project_name }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
      register: gcp_snapshots

    - name: Debug List all candidate snapshots for {{ transfer_disk_name }}
      debug:
        msg: "{{ gcp_snapshots.resources | selectattr('sourceDisk', 'search', transfer_disk_name + '$') | map(attribute='name') | list }}"

    - name: Set latest snapshot name for master-transfer-disk
      set_fact:
        latest_snapshot: >-
          {{
            (
              gcp_snapshots.resources
              | selectattr('sourceDisk', 'search', transfer_disk_name + '$')
              | sort(attribute='creationTimestamp', reverse=true)
              | map(attribute='name')
              | list
            )[0] | default('')
          }}
      when: gcp_snapshots.resources | length > 0

    - name: Debug Show latest snapshot selected
      debug:
        msg: "Using snapshot {{ latest_snapshot }} for replica disk"

    - name: Fail if no snapshot was found
      ansible.builtin.fail:
        msg: "No valid snapshot found for {{ transfer_disk_name }}. Aborting to avoid creating a blank disk!"
      when: latest_snapshot is not defined or latest_snapshot == ""

    - name: Check if replica disk exists
      ansible.builtin.command: >
        /google-cloud-sdk/bin/gcloud compute disks describe {{ disk_prefix }}-{{ replica_name }}
        --zone={{ replica_zone }}
        --project={{ gcp_project_name }}
      environment:
        CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE: "{{ gcp_service_account_file }}"
      register: disk_exists
      ignore_errors: true

    - name: Create disk from latest snapshot in replica zone (gcloud CLI)
      ansible.builtin.command: >
        /google-cloud-sdk/bin/gcloud compute disks create {{ disk_prefix }}-{{ replica_name }}
        --project={{ gcp_project_name }}
        --type={{ disk_type }}
        --size={{ disk_size_gb }}GB
        --zone={{ replica_zone }}
        --source-snapshot=projects/{{ gcp_project_name }}/global/snapshots/{{ latest_snapshot }}
      environment:
        CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE: "{{ gcp_service_account_file }}"
      when: disk_exists.rc != 0
      register: create_disk_result

    - name: Attach disk to replica (using gcloud CLI)
      ansible.builtin.command: >
        /google-cloud-sdk/bin/gcloud compute instances attach-disk {{ replica_name }}-{{ replica_zone }}
        --disk={{ disk_prefix }}-{{ replica_name }}
        --device-name={{ disk_prefix }}-{{ replica_name }}
        --zone={{ replica_zone }}
        --project={{ gcp_project_name }}
        --quiet
      environment:
        CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE: "{{ gcp_service_account_file }}"
      register: attach_disk_result
      changed_when: "'attached' in attach_disk_result.stdout or attach_disk_result.rc == 0"
      failed_when: >
        attach_disk_result.rc != 0 and
        ('already attached' not in attach_disk_result.stderr and
         'is already attached' not in attach_disk_result.stderr and
         'is already being used by' not in attach_disk_result.stderr)

    - name: Check for disk device on replica (retry up to 3 times)
      ansible.builtin.shell: |
        if [ -e /dev/disk/by-id/google-{{ disk_prefix }}-{{ replica_name }} ]; then
          echo "FOUND"
        else
          echo "NOT FOUND"
        fi
      register: disk_check
      retries: 3
      delay: 5
      until: disk_check.stdout.find("FOUND") != -1
      delegate_to: "{{ replica_name }}"
      failed_when: disk_check.stdout.find("FOUND") == -1

    - name: Fail if disk device did not appear after retries
      ansible.builtin.fail:
        msg: "Disk device /dev/disk/by-id/google-{{ disk_prefix }}-{{ replica_name }} did not appear after 3 attempts. Aborting."
      when: disk_check.stdout.find("FOUND") == -1

    - name: Create mount point on replica
      ansible.builtin.file:
        path: "{{ mount_point }}"
        state: directory
      delegate_to: "{{ replica_name }}"

    - name: Mount the disk on replica
      ansible.builtin.mount:
        path: "{{ mount_point }}"
        src: "/dev/disk/by-id/google-{{ disk_prefix }}-{{ replica_name }}"
        fstype: ext4
        state: mounted
      delegate_to: "{{ replica_name }}"

# =============================================================================
# Play 1: Configure Replica
# =============================================================================
- name: Ensure Replication is running or Configure Replica
  hosts:  "{{ replica_name }}"
  gather_facts: no
  become: yes
  
  vars_files:
    - /etc/ansible/group_vars/gcp.yml
    - /etc/ansible/group_vars/mariadb.yml
    
  vars:
    mariadb_service_name: mariadb
    gtid_domain_id: 1
    mariadb_data_dir: /var/lib/mysql
    dump_file_path: /mnt/mariadb-transfer/final_snapshot.sql.gz
    gtid_state_file: /mnt/mariadb-transfer/master_gtid_state.txt
    mariadb_container_name: "mdb-{{ replica_name }}"
  tags:
    - play1
  tasks:

    - name: Check replication status
      ansible.builtin.command: >
        docker exec {{ mariadb_container_name }} mysql -uroot -p'{{ replica_root_pwd }}' -Be "SHOW SLAVE STATUS\G"
      register: slave_status
      changed_when: false
      failed_when: false
      retries: 2
      delay: 3

    - name: Skip remaining tasks if replication is running
      ansible.builtin.meta: end_host
      when: >
        'Slave_IO_Running: Yes' in slave_status.stdout and
        'Slave_SQL_Running: Yes' in slave_status.stdout

    - name: Remove existing maxscale_user grants
      ansible.builtin.shell: >
        docker exec {{ mariadb_container_name }} mysql -uroot -p'{{ replica_root_pwd }}' -e "REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'maxscale_user'@'%';"
      register: revoke_grants
      changed_when: revoke_grants.rc == 0
      ignore_errors: true

    - name: Create or update maxscale_user on replica
      ansible.builtin.shell: >
        docker exec {{ mariadb_container_name }} mysql -uroot -p'{{ replica_root_pwd }}' -e "
          CREATE USER IF NOT EXISTS 'maxscale_user'@'%' IDENTIFIED BY '{{ maxscale_pwd }}';
          ALTER USER 'maxscale_user'@'%' IDENTIFIED BY '{{ maxscale_pwd }}';
          GRANT REPLICATION CLIENT, SUPER, RELOAD, PROCESS, SHOW DATABASES, EVENT, REPLICATION SLAVE ON *.* TO 'maxscale_user'@'%';
          FLUSH PRIVILEGES;"
      register: maxscale_user_result
      changed_when: maxscale_user_result.rc == 0

    - name: Create or update laravel user on replica
      ansible.builtin.shell: >
        docker exec {{ mariadb_container_name }} mysql -uroot -p'{{ replica_root_pwd }}' -e "
          CREATE USER IF NOT EXISTS 'laravel'@'%' IDENTIFIED BY '{{ laravel_pwd }}';
          ALTER USER 'laravel'@'%' IDENTIFIED BY '{{ laravel_pwd }}';
          GRANT ALL ON *.* TO 'laravel'@'%';
          FLUSH PRIVILEGES;"
      register: laravel_user_result
      changed_when: laravel_user_result.rc == 0

    - name: Drop all non-system databases on replica
      ansible.builtin.shell: >
        docker exec {{ mariadb_container_name }} mysql -uroot -p'{{ replica_root_pwd }}' -e "
        SET GLOBAL FOREIGN_KEY_CHECKS = 0;
        SELECT CONCAT('DROP DATABASE `', schema_name, '`;')
        FROM information_schema.schemata
        WHERE schema_name NOT IN ('mysql', 'information_schema', 'performance_schema', 'sys');
        SET GLOBAL FOREIGN_KEY_CHECKS = 1;"
      register: drop_databases
      changed_when: drop_databases.rc == 0

    - name: Configure MariaDB replica settings (my.cnf)
      ansible.builtin.blockinfile:
        path: /etc/mysql/my.cnf
        block: |
          [mysqld]
          server_id={{ replica_server_id }}
          log_bin=mysql-bin
          relay_log=mysql-relay-bin
          binlog_format=ROW
          log_slave_updates=ON
          read_only=ON
          gtid_domain_id={{ gtid_domain_id }}
          gtid_strict_mode=ON
          report_host={{ ansible_host }}
          report_port=3306
          innodb_buffer_pool_size=256M
          innodb_doublewrite=0
          innodb_flush_log_at_trx_commit=0
        marker: "# {mark} ANSIBLE MANAGED BLOCK - REPLICA SETTINGS"
        create: yes

    - name: Restart MariaDB container
      ansible.builtin.shell: >
        docker restart "{{ mariadb_container_name }}"
      register: restart_result
      changed_when: restart_result.rc == 0

    - name: Set innodb_buffer_pool_size to 1G for restore
      ansible.builtin.shell: >
        docker exec {{ mariadb_container_name }} mysql -uroot -p'{{ replica_root_pwd }}' -e "SET GLOBAL innodb_buffer_pool_size=1073741824;"
      register: set_buffer_pool_restore
      changed_when: set_buffer_pool_restore.rc == 0

    - name: Restore database dump on replica
      ansible.builtin.shell: >
        docker exec -i {{ mariadb_container_name }} sh -c 'gunzip | mysql -uroot -p'{{ replica_root_pwd }}'' < {{ dump_file_path }}
      register: restore_result
      changed_when: restore_result.rc == 0

    - name: Set innodb_buffer_pool_size back to 10G after restore
      ansible.builtin.shell: >
        docker exec {{ mariadb_container_name }} mysql -uroot -p'{{ replica_root_pwd }}' -e "SET GLOBAL innodb_buffer_pool_size=10737418240;"
      register: set_buffer_pool_normal
      changed_when: set_buffer_pool_normal.rc == 0

    - name: Wait for MariaDB port (3306) on replica
      ansible.builtin.wait_for:
        port: 3306
        host: "{{ ansible_host | default(inventory_hostname) }}"
        timeout: 60
        delay: 5

    - name: Stop replication on all replicas
      ansible.builtin.shell: >
        docker exec {{ mariadb_container_name }} mysql -uroot -p'{{ replica_root_pwd }}' -e "STOP SLAVE;"
      register: stop_slave
      changed_when: stop_slave.rc == 0

    - name: Reset replication state on all replicas
      ansible.builtin.shell: >
        docker exec {{ mariadb_container_name }} mysql -uroot -p'{{ replica_root_pwd }}' -e "RESET SLAVE ALL;"
      register: reset_slave
      changed_when: reset_slave.rc == 0

    - name: Reset binary logs on all replicas (if binary logs exist)
      ansible.builtin.shell: >
        docker exec {{ mariadb_container_name }} mysql -uroot -p'{{ replica_root_pwd }}' -e "RESET MASTER;"
      register: reset_master
      changed_when: reset_master.rc == 0

    - name: Read master's GTID state from file
      ansible.builtin.slurp:
        src: "{{ gtid_state_file }}"
      register: gtid_state_file

    - name: Decode master's GTID state
      ansible.builtin.set_fact:
        master_gtid_state: "{{ gtid_state_file.content | b64decode }}"

    - name: Set replica's GTID state
      ansible.builtin.shell: >
        docker exec {{ mariadb_container_name }} mysql -uroot -p'{{ replica_root_pwd }}' -e "SET GLOBAL gtid_slave_pos='{{ master_gtid_state }}';"
      register: set_gtid_state
      changed_when: set_gtid_state.rc == 0

    - name: Configure replication connection on replica
      ansible.builtin.shell: >
        docker exec {{ mariadb_container_name }} mysql -uroot -p'{{ replica_root_pwd }}' -e "
        CHANGE MASTER TO
          MASTER_HOST='{{ hostvars[groups['mariadb_master'][0]]['ansible_host'] | default(groups['mariadb_master'][0]) }}',
          MASTER_USER='{{ db_repl_user }}',
          MASTER_PASSWORD='{{ db_repl_password }}',
          MASTER_USE_GTID=slave_pos;"
      register: configure_replication
      changed_when: configure_replication.rc == 0

    - name: Start replication threads on replica
      ansible.builtin.shell: >
        docker exec {{ mariadb_container_name }} mysql -uroot -p'{{ replica_root_pwd }}' -e "START SLAVE;"
      register: start_replication
      changed_when: start_replication.rc == 0

    - name: Check replication status
      ansible.builtin.command: >
        docker exec {{ mariadb_container_name }} mysql -uroot -p'{{ replica_root_pwd }}' -Be "SHOW SLAVE STATUS\G"
      register: slave_status
      changed_when: false
      failed_when: >
        'Slave_IO_Running: Yes' not in slave_status.stdout or
        'Slave_SQL_Running: Yes' not in slave_status.stdout
      retries: 5
      delay: 10

    - name: Display final replication status
      ansible.builtin.debug:
        msg:
          - "Replication IO Thread Running: {{ slave_status.stdout | regex_search('Slave_IO_Running: (\\w+)', '\\1') | first }}"
          - "Replication SQL Thread Running: {{ slave_status.stdout | regex_search('Slave_SQL_Running: (\\w+)', '\\1') | first }}"
          - "Seconds Behind Master: {{ slave_status.stdout | regex_search('Seconds_Behind_Master: (\\d+)', '\\1') | first }}"
          - "Last IO Error: {{ slave_status.stdout | regex_search('Last_IO_Error: (.*)', '\\1') | first }}"
          - "Last SQL Error: {{ slave_status.stdout | regex_search('Last_SQL_Error: (.*)', '\\1') | first }}"

    - name: Check Docker container status
      ansible.builtin.docker_container_info:
        name: "{{ mariadb_container_name }}"
      register: container_status

    - name: Display Docker container status
      ansible.builtin.debug:
        var: container_status

# =============================================================================
# Play 2: Configure the new replica server in MaxScale (on master)
# =============================================================================
- name: Configure new replica in MaxScale
  hosts: mariadb_master
  gather_facts: no
  become: yes
  vars_files:
    - /etc/ansible/group_vars/gcp.yml
    - /etc/ansible/group_vars/mariadb.yml
  vars:
    maxscale_container_name: us-south1a-clone-maxscale-1
    replica_server_id: "{{ hostvars[replica_name].replica_server_id | default('2') }}"
    replica_host: "{{ hostvars[replica_name].ansible_host }}"
    replica_port: 3306
    maxscale_config_path: /etc/maxscale.cnf
  tags:
    - play2
  tasks:

    - name: Add new replica server to MaxScale via maxctrl
      ansible.builtin.shell: |
        docker exec {{ maxscale_container_name }} maxctrl create server {{ replica_name }} {{ replica_host }} {{ replica_port }}
      register: maxscale_create_server
      changed_when: "'Created' in maxscale_create_server.stdout"
      failed_when: >
        maxscale_create_server.rc != 0 and
        ('already exists' not in maxscale_create_server.stderr and
         'already exists' not in maxscale_create_server.stdout)

    - name: Add new replica server to monitor in MaxScale via maxctrl
      ansible.builtin.shell: |
        docker exec {{ maxscale_container_name }} maxctrl alter monitor {{ maxscale_monitor_name }} add server {{ replica_name }}
      register: maxscale_add_to_monitor
      changed_when: "'altered' in maxscale_add_to_monitor.stdout"
      failed_when: >
        maxscale_add_to_monitor.rc != 0 and
        ('already part of monitor' not in maxscale_add_to_monitor.stderr and
         'already part of monitor' not in maxscale_add_to_monitor.stdout)


