---
# Playbook to configure a MariaDB VM for replication using GCP.
# =============================================================================
# Set the replica name here or pass it via --extra-vars "replica_name=replica2"
# =============================================================================
- name: Ensure the VM exists
  hosts: localhost
  gather_facts: false
  vars_files:
    - /etc/ansible/group_vars/gcp.yml
  tasks:
    - name: Ensure the VM exists (create if needed)
      google.cloud.gcp_compute_instance:
        name: "{{ replica_name }}-{{ replica_zone }}"
        hostname: "{{ replica_name }}.mdb"
        machine_type: e2-standard-4
        zone: "{{ replica_zone }}"
        project: "{{ gcp_project_name }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
        disks:
          - auto_delete: true
            boot: true
            device_name: boot-disk
            initialize_params:
              source_image: projects/ubuntu-os-cloud/global/images/family/ubuntu-2204-lts
              disk_name: "{{ replica_name }}-boot"
              disk_type: pd-ssd
              disk_size_gb: 100
        network_interfaces:
          - network: { selfLink: "https://www.googleapis.com/compute/v1/projects/{{ gcp_project_name }}/global/networks/staging-vpc" }
            access_configs:
              - name: External NAT
                network_tier: STANDARD
                type: ONE_TO_ONE_NAT
        metadata:
          startup-script: |
            #!/bin/bash
            if [ ! -f /var/log/tailscale-installed ]; then
              curl -fsSL https://tailscale.com/install.sh | sh
              tailscale up --authkey={{ tailscale_auth_key }} --ssh --hostname={{ replica_name }}
              touch /var/log/tailscale-installed
            fi
        state: present        
      register: vm_instance
      
    - name: Add new vm to inventory.ini using Tailscale hostname
      ansible.builtin.lineinfile:
        path: /etc/ansible/inventory.ini
        insertbefore: '^\[mariadb:children\]'
        line: "{{ replica_name }} ansible_host={{ replica_name }} ansible_user=root replica_server_id={{ server_id }}"

    - name: Add new VM to in-memory inventory using Tailscale hostname
      add_host:
        name: "{{ replica_name }}"
        ansible_host: "{{ replica_name }}"
        ansible_user: root
        replica_server_id: "{{ server_id }}"


# =============================================================================
# Play 1: Ensure Required Tools are Installed
# =============================================================================
- name: Ensure Required Tools are Installed
  hosts: "{{ replica_name }}"
  gather_facts: false
  vars_files:
    - /etc/ansible/group_vars/gcp.yml
  vars:
    user : root # change to ansible user for prod 
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
  tasks:
    - name: Gather installed package facts
      ansible.builtin.package_facts:
        manager: auto

    - name: Check if Python 3 is installed
      raw: |
        dpkg -l | grep python3
      register: check_python3
      changed_when: false
      failed_when: check_python3.rc not in [0, 1]

    - name: Install Python 3 if not present
      raw: |
        apt-get update && apt-get install -y python3
      when: check_python3.rc == 1

    - name: Install python3-mysqldb
      ansible.builtin.apt:
        name: python3-mysqldb
        state: present
  
    - name: Install AppArmor
      ansible.builtin.apt:
        name:
          - apparmor
          - apparmor-utils
        state: present

        
#    - name: Reload AppArmor to apply changes
#      ansible.builtin.service:
#        name: apparmor
#        state: reloaded

# =============================================================================
# Play 2: Ensure Dockerized MariaDB Replica
# =============================================================================
- name: Ensure Dockerized MariaDB Replica
  hosts: "{{ replica_name }}"
  gather_facts: false
  vars_files:
    - /etc/ansible/group_vars/gcp.yml
  vars:
    mariadb_version: "10.4.33"
    mariadb_image: "mariadb:10.4.33"
    mariadb_data_dir: "/srv/mariadb_data"
    mariadb_config_dir: "/opt/mariadb_config"
    mariadb_custom_cnf: "/opt/mariadb_config/custom.cnf"
    mariadb_container_name: "mdb-{{ replica_name }}"
    mariadb_root_password: "{{ vault_db_root_password }}"
    # Tuning variables (override as needed)
    innodb_buffer_pool_size: "12G"
    innodb_log_file_size: "1G"
    innodb_log_files_in_group: 2
    innodb_flush_method: "O_DIRECT"
    innodb_io_capacity: 2000
    innodb_io_capacity_max: 4000
    max_connections: 250
    thread_cache_size: 32
    tmp_table_size: "128M"
    max_heap_table_size: "128M"
    query_cache_type: "OFF"
    query_cache_size: 0
  tasks:
    - name: Ensure Docker is installed
      ansible.builtin.apt:
        name: docker.io
        state: present
        update_cache: yes

    - name: Ensure Docker Python SDK is installed
      ansible.builtin.pip:
        name: docker
        state: present

    - name: Create MariaDB data directory
      ansible.builtin.file:
        path: "{{ mariadb_data_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Create MariaDB config directory
      ansible.builtin.file:
        path: "{{ mariadb_config_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Template custom MariaDB config
      ansible.builtin.template:
        src: my_custom.cnf.j2
        dest: "{{ mariadb_custom_cnf }}"
        owner: root
        group: root
        mode: '0644'

    - name: Pull MariaDB Docker image
      community.docker.docker_image:
        name: "{{ mariadb_image }}"
        source: pull

    - name: Run MariaDB Docker container
      community.docker.docker_container:
        name: "{{ mariadb_container_name }}"
        image: "{{ mariadb_image }}"
        state: started
        restart_policy: always
        volumes:
          - "{{ mariadb_data_dir }}:/var/lib/mysql"
          - "{{ mariadb_custom_cnf }}:/etc/mysql/conf.d/custom.cnf:ro"
        env:
          LD_PRELOAD: "/usr/lib/x86_64-linux-gnu/libjemalloc.so.2"
          MARIADB_ROOT_PASSWORD: "{{ mariadb_root_password }}"
        memory: "12g"
        cpus: 4


